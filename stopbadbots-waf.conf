# StopBadBots WAF - Additional Security Rules 
# This custom ruleset enhances the default protection provided by the Comodo WAF.
# It adds proactive defenses against brute-force attacks, aggressive scanners, and other behavioral threats.
# Implementing these rules strengthens overall server security by blocking suspicious activities the standard ruleset may not cover.
# Updated: 2025 Aug 12


# This rule completely denies access to the xmlrpc.php file. This is a critical security measure, 
# as this file is a primary target for brute-force login attacks and can be abused to launch 
# DDoS attacks against other sites. Disabling it protects against these major threats 
# with minimal impact on modern websites.
SecRule REQUEST_URI "@contains /xmlrpc.php" "id:100001,phase:1,log,deny,status:403"



# Block IPs that generate too many 404 errors.
# This rule mitigates vulnerability scanners and bots searching for non-existent files.
# It works in two parts: a counter and a blocker, which are tuned separately.
#
# --- How to Tune This Rule ---
# There are two limits you can change:
# 1. The HIT COUNT (Threshold): How many 404s trigger a block.
#    - Set in Rule 1000002 by changing the number in "@gt 5".
# 2. The TIME WINDOW (Cooldown): The time frame for the hits to occur.
#    - Set in Rule 1000003 by changing the number in "expirevar:IP.bf_counter=180".
#
# --- ACTIVE SETTINGS ---
# Currently, an IP will be blocked if it generates more than 5 404 errors
# within a 180-second (3-minute) window.

# Part 1: The Blocker
# Blocks the IP if its 404 counter exceeds the defined limit.
# This rule runs in phase:1 for maximum efficiency, blocking the request early.
SecRule IP:bf_counter "@gt 5" \
    "id:1000002,phase:1,block,deny,status:403,log,msg:'IP blocked for excessive 404 errors - Limit of 5 in 180s exceeded.'"

# Part 2: The Counter
# Detects a 404 Not Found response and increments the counter for the source IP.
# This rule is the trigger; it identifies the behavior without blocking directly.
SecRule RESPONSE_STATUS "@eq 404" \
    "id:1000003,phase:4,pass,nolog,initcol:IP.bf_counter=0,setvar:IP.bf_counter=+1,expirevar:IP.bf_counter=180"


# Block suspicious User-Agent substrings
SecRule REQUEST_HEADERS:User-Agent "@pm Mozlila \"ALittle Client\" wp_is_mobile colonel" \
    "id:1000006,phase:1,deny,status:403,log,auditlog,\
    msg:'ModSecurity: Blocked known malicious or non-standard User-Agent substring.'"

# Block exact suspicious User-Agent match
SecRule REQUEST_HEADERS:User-Agent "@streq Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)" \
    "id:1000007,phase:1,deny,status:403,log,auditlog,\
    msg:'ModSecurity: Blocked exact malicious User-Agent.'"


# Block Probing for wp-config.php Backups
# Critical rule to prevent theft of DB credentials from backup files.
SecRule REQUEST_URI "@rx /wp-config\." "id:1000008,phase:2,deny,status:403,log,auditlog,msg:'ModSecurity: Denied access to a wp-config backup file.'"

# Block Probing for Sensitive Information Files
# Blocks access to readme.txt and debug.log.
SecRule REQUEST_URI "@rx /(readme\.txt|debug\.log)$" "id:1000009,phase:2,deny,status:403,log,auditlog,msg:'ModSecurity: Denied access to sensitive information file.'"

# Block PHAR Deserialization Attacks
# Prevents a common PHP RCE vector via the 'phar://' stream wrapper.
SecRule ARGS|ARGS_NAMES|REQUEST_BODY|FILES_NAMES "@rx phar:\/\/" \
    "id:1000010,phase:2,deny,status:403,log,auditlog,msg:'ModSecurity: PHAR deserialization attack blocked.'"

# Block Generic PHP Object Injection in Request Body/Args
# Looks for serialized PHP objects, a major RCE vector.
SecRule ARGS|ARGS_NAMES|REQUEST_BODY "@rx O:[0-9]+:\"" \
    "id:1000011,phase:2,deny,status:403,log,auditlog,msg:'ModSecurity: PHP Object Injection attempt blocked.'"

# Block XML External Entity (XXE) Attacks
# Prevents attacks that abuse XML parsers to read local files.
SecRule REQUEST_BODY "@rx <!ENTITY\s+SYSTEM" \
    "id:1000012,phase:2,deny,status:403,log,auditlog,msg:'ModSecurity: XXE attack blocked.'"

# Block XSS in IP Forwarding Headers
# Protects against XSS injected into headers like X-Forwarded-For.
SecRule REQUEST_HEADERS:X-Forwarded-For|REQUEST_HEADERS:Client-IP "@rx <\s*script" \
    "id:1000013,phase:1,deny,status:403,log,auditlog,msg:'ModSecurity: XSS attempt in forwarding headers blocked.'"
  
# Block Prototype Pollution Attacks
# Blocks parameters named '__proto__', 'constructor', or 'prototype'.
SecRule ARGS_NAMES "@rx ^(__proto__|constructor|prototype)$" \
    "id:1000014,phase:2,deny,status:403,log,auditlog,msg:'ModSecurity: Prototype Pollution attempt blocked.'"

# Block PHP Object Injection in Cookies
# Specifically targets serialized PHP objects sent within cookies.
SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES "@rx O:[0-9]+:\"" \
    "id:1000015,phase:2,deny,status:403,log,auditlog,msg:'ModSecurity: PHP Object Injection attempt in cookie blocked.'"
                                                                                  
# Block  known vulnerability scanners and malicious tools.
SecRule REQUEST_HEADERS:User-Agent "@pm arachni betabot bewica-security-scan bfac commix cyberscan.io detectify dirbuster fimap \"fuzz faster\" gobuster \"greenbone os\" havij hexometer jbrofuzz jorgee libwhisker masscan morfeus nessus netlab360 netsparker nikto nmap nuclei openvas punkspider qualys sitelockspider sqlmap sysscan tsunamisecurityscanner \"ut-dorkbot\" virusdie-sdsnetwork w3af.org webbandit webshag \"whitehat security\" wfuzz whatweb wprecon wpscan zgrab zmeu" "id:1000019,phase:1,t:lowercase,deny,status:403,log,auditlog,msg:'ModSecurity: Known vulnerability scanner detected and blocked.'"
                                                                                  
                                                                                  
# Enforce Allowed HTTP Request Methods
# Blocks potentially harmful or unnecessary HTTP methods.
SecRule REQUEST_METHOD "!@within GET HEAD POST" \
    "id:1000020,phase:1,deny,status:405,log,auditlog,msg:'ModSecurity: HTTP method not allowed.'"

           
# Block Common Unix Shell Commands in Arguments
# Prevents Remote Code Execution (RCE) by blocking dangerous shell commands.
SecRule ARGS|ARGS_NAMES "@rx \b(wget|curl|nc|chmod|uname|whoami)\b" \
    "id:1000021,phase:2,deny,status:403,log,auditlog,msg:'ModSecurity: Dangerous shell command detected in request arguments.'"

# Blocks requests for filenames commonly associated with PHP web shells. This rule
# uses the @pmFromFile operator to load its blocklist from an external data file.
# The absolute path to this file is specified below and is critical for the rule to function.
SecRule REQUEST_BASENAME "@pmFromFile /usr/local/apache/modsecurity-cwaf/rules/web-shells-php.data" \
    "id:1000099,phase:2,deny,status:403,log,auditlog,msg:'ModSecurity: Access to known web shell filename blocked (OWASP list).'"
                                                                   
                                                                                  
