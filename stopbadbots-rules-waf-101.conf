# StopBadBots WAF - Additional Security Rules
#
# This custom ruleset enhances the default protection provided by the Comodo WAF.
# It adds proactive defenses against brute-force attacks, aggressive scanners, and other behavioral threats.
# Implementing these rules strengthens overall server security by blocking suspicious activities the standard ruleset may not cover.
#
# Version: 1.1
# Maintainer: StopBadBots.com
# Last Updated: 2025 Aug 15
#
# --- IMPORTANT NOTE ---
# This ruleset relies on external data files (.data). Ensure that the paths
# specified in all rules using the @pmFromFile operator are correct for your environment.

# =================================================================
# Ruleset Summary (Updated: 2025 Aug 15)
# =================================================================
# 1.   id:1000001 (Block xmlrpc.php Access)
# 2.   id:1000002 (HTTP Method Exception - WP API)
# 3.   id:1000003 (Enforce Allowed HTTP Methods)
# 4.   id:1000004 (Excessive 404s Blocker)
# 5.   id:1000005 (Excessive HEADs Counter Init)
# 6.   id:1000006 (Excessive HEADs Counter Increment)
# 7.   id:1000007 (Excessive HEADs Blocker)
# 8.   id:1000008 (Exact Malicious User-Agent)
# 9.   id:1000009 (Malicious User-Agent Substring)
# 10.  id:1000010 (Command-Line User-Agent)
# 11.  id:1000011 (Vulnerability Scanner User-Agent)
# 12.  id:1000012 (Bad Bot User-Agent - File)
# 13.  id:1000013 (XSS in Forwarding Headers)
# 14.  id:1000014 (Host Header is IP Address)
# 15.  id:1000015 (Missing Accept Header)
# 16.  id:1000016 (wp-config Access)
# 17.  id:1000017 (Sensitive File Access)
# 18.  id:1000018 (Directory Traversal - Headers)
# 19.  id:1000019 (Directory Traversal - Arguments)
# 20.  id:1000020 (Shell Commands in Arguments)
# 21.  id:1000021 (PHP Object Injection - Body/Args)
# 22.  id:1000022 (PHP Object Injection - Cookies)
# 23.  id:1000023 (PHAR Deserialization Attack)
# 24.  id:1000024 (XXE Attack)
# 25.  id:1000025 (Prototype Pollution Attack)
# 26.  id:1000026 (Restricted Files - File)
# 27.  id:1000027 (Web Shells - File)
# 28.  id:1000028 (Excessive 404s Counter)
# =================================================================


# =================================================================
# === PHASE 1: REQUEST HEADERS ANALYSIS (FAST BLOCKING) ===
# =================================================================
# Rules in this phase run first and are the most performant,
# as they only analyze the request headers.

# --- 1.1: Fundamental and Behavioral Checks ---

# Last Updated: 2025 Aug 15
# Blocks direct access to xmlrpc.php, a common target for brute-force attacks.
SecRule REQUEST_URI "@contains /xmlrpc.php" "id:1000001,phase:1,log,deny,status:403,msg:'Direct access to xmlrpc.php blocked.'"

# Last Updated: 2025 Aug 15
# Rule block to enforce allowed HTTP methods (GET, HEAD, POST).
# First, an exception is created to allow the OPTIONS method for the WordPress REST API.
SecRule REQUEST_METHOD "@streq OPTIONS" "id:1000002,phase:1,nolog,pass,chain"
    SecRule REQUEST_URI "@beginsWith /wp-json/" "ctl:ruleRemoveById=1000003"
# Then, the main rule that blocks all other methods.
SecRule REQUEST_METHOD "!@within GET HEAD POST" "id:1000003,phase:1,deny,status:403,log,auditlog,msg:'ModSecurity: HTTP method not allowed.'"

# Last Updated: 2025 Aug 15
# Blocks the IP if its 404 error counter exceeds the limit (Part 1 of 2).
SecRule IP:bf_counter "@gt 5" "id:1000004,phase:1,block,deny,status:403,log,msg:'IP blocked for excessive 404 errors - Limit of 5 in 180s exceeded.'"

# Last Updated: 2025 Aug 15
# Rule block to rate-limit HEAD requests, effective against scanners.
# Rule 1: Initializes the HEAD request counter for an IP.
SecRule REQUEST_METHOD "@streq HEAD" "id:1000005,phase:1,t:none,nolog,pass,initcol:ip.head_requests_counter=60"
# Rule 2: Increments the counter on each HEAD request.
SecRule REQUEST_METHOD "@streq HEAD" "id:1000006,phase:1,t:none,nolog,pass,setvar:ip.head_requests_counter=+1"
# Rule 3: Blocks if the counter exceeds 1 in 60 seconds.
SecRule IP:HEAD_REQUESTS_COUNTER "@gt 1" "id:1000007,phase:1,t:none,deny,log,msg:'Blocked: Excessive HEAD requests detected (more than 1 in 60s), possible scanner.'"

# --- 1.2: User-Agent Analysis ---

# Last Updated: 2025 Aug 15
# Blocks User-Agents with an exact match to known malicious strings.
SecRule REQUEST_HEADERS:User-Agent "@streq Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)" "id:1000008,phase:1,deny,status:403,log,auditlog,msg:'ModSecurity: Blocked exact malicious User-Agent.'"

# Last Updated: 2025 Aug 15
# Blocks User-Agents containing suspicious or non-standard substrings.
SecRule REQUEST_HEADERS:User-Agent "@pm Mozlila \"ALittle Client\" wp_is_mobile colonel" "id:1000009,phase:1,deny,status:403,log,auditlog,msg:'ModSecurity: Blocked known malicious or non-standard User-Agent substring.'"

# Last Updated: 2025 Aug 15
# Blocks User-Agents identifying as common command-line tools.
SecRule REQUEST_HEADERS:User-Agent "@pm curl wget python-requests Go-http-client Java/ libwww-perl" "id:1000010,phase:1,t:none,t:lowercase,deny,log,msg:'Blocked: Automated tool or library detected in User-Agent (%{REQUEST_HEADERS.User-Agent})'"

# Last Updated: 2025 Aug 15
# Blocks User-Agents of known vulnerability scanners (internal list).
SecRule REQUEST_HEADERS:User-Agent "@pm arachni betabot bewica-security-scan bfac commix cyberscan.io detectify dirbuster fimap \"fuzz faster\" gobuster \"greenbone os\" havij hexometer jbrofuzz jorgee libwhisker masscan morfeus nessus netlab360 netsparker nikto nmap nuclei openvas punkspider qualys sitelockspider sqlmap sysscan tsunamisecurityscanner \"ut-dorkbot\" virusdie-sdsnetwork w3af.org webbandit webshag \"whitehat security\" wfuzz whatweb wprecon wpscan zgrab zmeu" "id:1000011,phase:1,t:lowercase,deny,status:403,log,auditlog,msg:'ModSecurity: Known vulnerability scanner detected and blocked.'"

# Last Updated: 2025 Aug 15
# NOTE: This rule requires an external data file. Verify the path is correct: /usr/local/apache/modsecurity-cwaf/rules/bad-bots.data
# Blocks User-Agents of unwanted bots/spiders (external list).
SecRule REQUEST_HEADERS:User-Agent "@pmFromFile /usr/local/apache/modsecurity-cwaf/rules/bad-bots.data" "id:1000012,phase:1,t:none,t:lowercase,deny,log,msg:'Access blocked for unwanted bot/spider (User-Agent: %{REQUEST_HEADERS.User-Agent})'"

# --- 1.3: Other Header Checks ---

# Last Updated: 2025 Aug 15
# Blocks XSS attempts in IP forwarding headers.
SecRule REQUEST_HEADERS:X-Forwarded-For|REQUEST_HEADERS:Client-IP "@rx <\s*script" "id:1000013,phase:1,deny,status:403,log,auditlog,msg:'ModSecurity: XSS attempt in forwarding headers blocked.'"

# =================================================================
# === PHASE 2: REQUEST BODY ANALYSIS (DEEP INSPECTION) ===
# =================================================================
# Rules executed after the full request (headers and body) has been received.

# --- 2.1: Protocol and Header Anomalies ---

# Last Updated: 2025 Aug 15
# Blocks requests where the Host header is a literal IP address.
SecRule REQUEST_HEADERS:Host "^[\d.:]+$" "id:1000014,phase:2,t:none,deny,log,msg:'Blocked: Host header is a literal IP address, possible scanner.'"

# Last Updated: 2025 Aug 15
# Blocks requests that are missing the 'Accept' header.
SecRule &REQUEST_HEADERS:Accept "@eq 0" "id:1000015,phase:2,t:none,deny,log,msg:'Blocked: Request missing required Accept header.'"

# --- 2.2: File and Directory Access Attempts ---

# Last Updated: 2025 Aug 15
# Blocks attempts to access wp-config backups.
SecRule REQUEST_URI "@rx /wp-config\." "id:1000016,phase:2,deny,status:403,log,auditlog,msg:'ModSecurity: Denied access to a wp-config backup file.'"

# Last Updated: 2025 Aug 15
# Blocks attempts to access other sensitive information files.
SecRule REQUEST_URI "@rx /(readme\.txt|debug\.log)$" "id:1000017,phase:2,deny,status:403,log,auditlog,msg:'ModSecurity: Denied access to sensitive information file.'"

# Last Updated: 2025 Aug 15
# Blocks Directory Traversal attacks in HTTP headers.
SecRule REQUEST_HEADERS|REQUEST_HEADERS_NAMES "@rx \.\.(?:/|\\\\)" "id:1000018,phase:2,block,log,msg:'Directory Traversal attack detected in HTTP headers.',t:none,t:urlDecode,t:lowercase"

# Last Updated: 2025 Aug 15
# Blocks Directory Traversal attacks in request arguments.
SecRule ARGS|ARGS_NAMES "@rx (?:\.\./|/\.\.[/\\\\]|\.{2}\\\\)" "id:1000019,phase:2,block,log,msg:'ModSecurity: Directory Traversal attempt detected in arguments.',t:none,t:urlDecode,t:lowercase"

# --- 2.3: Code and Data Injection Attempts ---

# Last Updated: 2025 Aug 15
# Blocks common shell commands in arguments to prevent RCE.
SecRule ARGS|ARGS_NAMES "@rx \b(wget|curl|nc|chmod|uname|whoami)\b" "id:1000020,phase:2,deny,status:403,log,auditlog,msg:'ModSecurity: Dangerous shell command detected in request arguments.'"

# Last Updated: 2025 Aug 15
# Blocks serialized PHP Object Injection in the request body/args.
SecRule ARGS|ARGS_NAMES|REQUEST_BODY "@rx O:[0-9]+:\"" "id:1000021,phase:2,deny,status:403,log,auditlog,msg:'ModSecurity: PHP Object Injection attempt blocked.'"

# Last Updated: 2025 Aug 15
# Blocks serialized PHP Object Injection in cookies.
SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES "@rx O:[0-9]+:\"" "id:1000022,phase:2,deny,status:403,log,auditlog,msg:'ModSecurity: PHP Object Injection attempt in cookie blocked.'"

# Last Updated: 2025 Aug 15
# Blocks PHAR deserialization attacks.
SecRule ARGS|ARGS_NAMES|REQUEST_BODY|FILES_NAMES "@rx phar:\/\/" "id:1000023,phase:2,deny,status:403,log,auditlog,msg:'ModSecurity: PHAR deserialization attack blocked.'"

# Last Updated: 2025 Aug 15
# Blocks XML External Entity (XXE) attacks.
SecRule REQUEST_BODY "@rx <!ENTITY\s+SYSTEM" "id:1000024,phase:2,deny,status:403,log,auditlog,msg:'ModSecurity: XXE attack blocked.'"

# Last Updated: 2025 Aug 15
# Blocks Prototype Pollution attacks.
SecRule ARGS_NAMES "@rx ^(__proto__|constructor|prototype)$" "id:1000025,phase:2,deny,status:403,log,auditlog,msg:'ModSecurity: Prototype Pollution attempt blocked.'"

# --- 2.4: Blocking Based on External File Lists ---

# Last Updated: 2025 Aug 15
# NOTE: This rule requires an external data file. Verify the path is correct: /usr/local/apache/modsecurity-cwaf/rules/restricted-files.data
# Blocks access to restricted and sensitive files (e.g., .env, .htaccess).
SecRule REQUEST_BASENAME "@pmFromFile /usr/local/apache/modsecurity-cwaf/rules/restricted-files.data" "id:1000026,phase:2,deny,status:403,log,auditlog,msg:'ModSecurity: Blocked access to a restricted file.'"

# Last Updated: 2025 Aug 15
# NOTE: This rule requires an external data file. Verify the path is correct: /usr/local/apache/modsecurity-cwaf/rules/web-shells-php.data
# Blocks access to known web shell filenames.
SecRule REQUEST_BASENAME "@pmFromFile /usr/local/apache/modsecurity-cwaf/rules/web-shells-php.data" "id:1000027,phase:2,deny,status:403,log,auditlog,msg:'ModSecurity: Access to known web shell filename blocked (OWASP list).'"

# =================================================================
# === PHASE 4: SERVER RESPONSE ANALYSIS ===
# =================================================================
# Rules executed after the server has generated a response.

# Last Updated: 2025 Aug 15
# Detects a 404 response and increments the counter for the source IP (Part 2 of 2).
SecRule RESPONSE_STATUS "@eq 404" "id:1000028,phase:4,pass,nolog,initcol:IP.bf_counter=0,setvar:IP.bf_counter=+1,expirevar:IP.bf_counter=180"